from __future__ import print_function
import unittest
from SwapBill import TradeOfferHeap

class Test(unittest.TestCase):
	def _doTest(self, negateExchangeRates):
		h = TradeOfferHeap.Heap(100, negateExchangeRates)
		rateSign = -1 if negateExchangeRates else 1
		self.assertTrue(h.empty())
		h.addOffer(1000 * rateSign, 103, 'offer1')
		self.assertFalse(h.empty())
		self.assertEqual(h.peekCurrentBest(), 'offer1')
		self.assertEqual(h.currentBestExchangeRate(), 1000 * rateSign)
		h.addOffer(999 * rateSign, 104, 'offer2')
		self.assertEqual(h.size(), 2)
		self.assertEqual(h.peekCurrentBest(), 'offer2')
		self.assertEqual(h.currentBestExchangeRate(), 999 * rateSign)
		#h.addOffer('c', 11, 1001 * rateSign, 105)
		h.addOffer(1001 * rateSign, 105, 'offer3')
		self.assertEqual(h.size(), 3)
		self.assertEqual(h.peekCurrentBest(), 'offer2')
		self.assertEqual(h.currentBestExchangeRate(), 999 * rateSign)
		expired = h.advanceToBlock(101)
		self.assertEqual(expired, [])
		self.assertEqual(h.size(), 3)
		self.assertEqual(h.peekCurrentBest(), 'offer2')
		self.assertEqual(h.currentBestExchangeRate(), 999 * rateSign)
		expired = h.advanceToBlock(104)
		self.assertEqual(expired, ['offer1'])
		self.assertEqual(h.size(), 2)
		self.assertEqual(h.peekCurrentBest(), 'offer2')
		self.assertEqual(h.currentBestExchangeRate(), 999 * rateSign)
		expired = h.advanceToBlock(105)
		self.assertEqual(expired, ['offer2'])
		self.assertEqual(h.size(), 1)
		self.assertEqual(h.peekCurrentBest(), 'offer3')
		self.assertEqual(h.currentBestExchangeRate(), 1001 * rateSign)
		expired = h.advanceToBlock(111)
		self.assertEqual(expired, ['offer3'])
		self.assertTrue(h.empty())
		h.addOffer(1000 * rateSign, 120, 'offer4')
		h.addOffer(999 * rateSign, 120, 'offer5')
		h.addOffer(1001 * rateSign, 121, 'offer6')
		h.addOffer(900 * rateSign, 120, 'offer7')
		self.assertEqual(h.size(), 4)
		self.assertEqual(h.peekCurrentBest(), 'offer7')
		self.assertEqual(h.currentBestExchangeRate(), 900 * rateSign)
		popped = h.popCurrentBest()
		self.assertEqual(popped, 'offer7')
		self.assertEqual(h.size(), 3)
		self.assertEqual(h.peekCurrentBest(), 'offer5')
		self.assertEqual(h.currentBestExchangeRate(), 999 * rateSign)
		expired = h.advanceToBlock(121)
		self.assertEqual(sorted(expired), ['offer4', 'offer5'])
		self.assertEqual(h.size(), 1)
		self.assertEqual(h.peekCurrentBest(), 'offer6')
		self.assertEqual(h.currentBestExchangeRate(), 1001 * rateSign)

	def test(self):
		self._doTest(False)
		self._doTest(True)
